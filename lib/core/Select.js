"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Node_1 = require("./Node");
const Select = ({ className, value, children, style, autoFocus, disabled, readonly, required, name, id, attributes, onAbort, onAnimationCancel, onAnimationEnd, onAnimationIteration, onAnimationStart, onAuxClick, onBlur, onCancel, onCanPlay, onCanPlayThrough, onChange, onClick, onClose, onContextMenu, onCueChange, onDblClick, onDrag, onDragEnd, onDragEnter, onDragExit, onDragLeave, onDragOver, onDragStart, onDrop, onDurationChange, onEmptied, onEnded, onError, onFocus, onGotPointerCapture, onInput, onInvalid, onKeyDown, onKeyPress, onKeyUp, onLoad, onLoadedData, onLoadedMetaData, onLoadStart, onLostPointerCapture, onMouseDown, onMouseEnter, onMouseLeave, onMouseMove, onMouseOut, onMouseOver, onMouseUp, onPause, onPlay, onPlaying, onPointerCancel, onPointerDown, onPointerEnter, onPointerLeave, onPointerMove, onPointerOut, onPointerOver, onPointerUp, onProgress, onRateChange, onReset, onResize, onScroll, onSecurityPolicyViolation, onSeeked, onSeeking, onSelect, onSelectionChange, onSelectStart, onStalled, onSubmit, onSuspend, onTimeUpdate, onToggle, onTouchCancel, onTouchEnd, onTouchMove, onTouchStart, onTransitionCancel, onTransitionEnd, onTransitionRun, onTransitionStart, onVolumeChange, onWaiting, onWheel, } = {}) => {
    return Node_1.default(Object.assign(Object.assign({ class: className, children,
        style,
        value, autoFocus: autoFocus ? "autofocus" : "", disabled: disabled ? "disabled" : null, required: required ? "required" : null, readonly: readonly ? "readonly" : null, name,
        id }, attributes), { onabort: onAbort, onanimationcancel: onAnimationCancel, onanimationend: onAnimationEnd, onanimationiteration: onAnimationIteration, onanimationstart: onAnimationStart, onauxclick: onAuxClick, onblur: onBlur, oncancel: onCancel, oncanplay: onCanPlay, oncanplaythrough: onCanPlayThrough, onchange: onChange, onclick: onClick, onclose: onClose, oncontextmenu: onContextMenu, oncuechange: onCueChange, ondblclick: onDblClick, ondrag: onDrag, ondragend: onDragEnd, ondragenter: onDragEnter, ondragexit: onDragExit, ondragleave: onDragLeave, ondragover: onDragOver, ondragstart: onDragStart, ondrop: onDrop, ondurationchange: onDurationChange, onemptied: onEmptied, onended: onEnded, onerror: onError, onfocus: onFocus, ongotpointercapture: onGotPointerCapture, oninput: onInput, oninvalid: onInvalid, onkeydown: onKeyDown, onkeypress: onKeyPress, onkeyup: onKeyUp, onload: onLoad, onloadeddata: onLoadedData, onloadedmetadata: onLoadedMetaData, onloadstart: onLoadStart, onlostpointercapture: onLostPointerCapture, onmousedown: onMouseDown, onmouseenter: onMouseEnter, onmouseleave: onMouseLeave, onmousemove: onMouseMove, onmouseout: onMouseOut, onmouseover: onMouseOver, onmouseup: onMouseUp, onpause: onPause, onplay: onPlay, onplaying: onPlaying, onpointercancel: onPointerCancel, onpointerdown: onPointerDown, onpointerenter: onPointerEnter, onpointerleave: onPointerLeave, onpointermove: onPointerMove, onpointerout: onPointerOut, onpointerover: onPointerOver, onpointerup: onPointerUp, onprogress: onProgress, onratechange: onRateChange, onreset: onReset, onresize: onResize, onscroll: onScroll, onsecuritypolicyviolation: onSecurityPolicyViolation, onseeked: onSeeked, onseeking: onSeeking, onselect: onSelect, onselectionchange: onSelectionChange, onselectstart: onSelectStart, onstalled: onStalled, onsubmit: onSubmit, onsuspend: onSuspend, ontimeupdate: onTimeUpdate, ontoggle: onToggle, ontouchcancel: onTouchCancel, ontouchend: onTouchEnd, ontouchmove: onTouchMove, ontouchstart: onTouchStart, ontransitioncancel: onTransitionCancel, ontransitionend: onTransitionEnd, ontransitionrun: onTransitionRun, ontransitionstart: onTransitionStart, onvolumechange: onVolumeChange, onwaiting: onWaiting, onwheel: onWheel }), 'select');
};
exports.default = Select;
//# sourceMappingURL=Select.js.map